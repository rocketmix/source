<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>io.github.rocketmix</groupId>
	<artifactId>rocketmix-parent</artifactId>
	<name>RocketMiX Parent Maven Project</name>
	<description>RocketMiX Parent Project contains all common stuff we need to build all sub projects</description>
	<url>https://github.com/rocketmix/rocketmix.source</url>
	<version>1.0.43-SNAPSHOT</version>
	<packaging>pom</packaging>
	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
		</license>
	</licenses>
	<distributionManagement>
		<snapshotRepository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/content/repositories/snapshots</url>
		</snapshotRepository>
		<repository>
			<id>ossrh</id>
			<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
		</repository>
	</distributionManagement>
	<scm>
		<connection>scm:git:https://github.com/rocketmix/rocketmix.source.git</connection>
		<developerConnection>scm:git:https://github.com/rocketmix/rocketmix.source.git</developerConnection>
		<url>https://github.com/rocketmix/rocketmix.source</url>
		<tag>rocketmix-parent-1.0.33</tag>
	</scm>
	<developers>
		<developer>
			<name>Alexandre de Pellegrin</name>
			<email>alexdp@free.fr</email>
			<organization>RocketMiX.github.io</organization>
			<organizationUrl>https://rocketmix.github.io</organizationUrl>
		</developer>
	</developers>
	<modules>
		<module>rocketmix-dashboard</module>
		<module>rocketmix-routing-server</module>
		<module>rocketmix-spring-boot-starter</module>
		<module>rocketmix-services-demo</module>
	</modules>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
		<cxf.version>3.3.1</cxf.version>
		<swagger-ui.version>3.19.5</swagger-ui.version>
		<spring.boot.version>2.2.2.RELEASE</spring.boot.version>
		<spring.admin.version>2.2.1</spring.admin.version>
		<spring.cloud.version>Hoxton.SR1</spring.cloud.version>
	</properties>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.2</version>
	</parent>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring.cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.gif</include>
					<include>**/*.jpg</include>
					<include>**/*.properties</include>
					<include>**/*.xml</include>
				</includes>
			</resource>
		</resources>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
				</plugin>
				<!-- FIX TO MAKE ECLIPSE HAPPY BY AVOIDING IT TO UNPACK LINUX INSTALL SCRIPT ON PROJECt MAVEN IMPORT OR UPDATE (start) -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[3.0.0,)</versionRange>
										<goals>
											<goal>unpack-dependencies</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
				<!-- FIX TO MAKE ECLIPSE HAPPY BY AVOIDING IT TO UNPACK LINUX INSTALL SCRIPT ON PROJECt MAVEN IMPORT OR UPDATE (end) -->
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- ALLOW SERVLET 3 WITHOUT WEB.XML (start) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<warName>${project.build.finalName}</warName>
					<failOnMissingWebXml>false</failOnMissingWebXml>
					<recompressZippedFiles>false</recompressZippedFiles>
					<attachClasses>true</attachClasses>
					<archive>
						<compress>false</compress>
						<!-- ATTENTION!!! Suppression du manifest d'origine sinon ne peut pas 
							etre tranforme en executable Linux -->
						<!-- ${project.build.directory}/war/work/org.apereo.cas/cas-server-webapp-tomcat/META-INF/MANIFEST.MF -->
						<manifestFile />
					</archive>
				</configuration>
			</plugin>
			<!-- ALLOW SERVLET 3 WITHOUT WEB.XML (end) -->
			<!-- EXTRACT INSTALL SCRIPT (start) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<configuration>
							<includeArtifactIds>rocketmix-spring-boot-starter</includeArtifactIds>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<includes>/installer/install.sh</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- EXTRACT INSTALL SCRIPT (end) -->
			<!-- TRANSFORM WAR TO LINUX EXECUTABLE FILE (start) -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<addResources>true</addResources>
					<executable>true</executable>
					<embeddedLaunchScript>${project.build.directory}/installer/install.sh</embeddedLaunchScript>
					<layout>WAR</layout>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- TRANSFORM WAR TO LINUX EXECUTABLE FILE (end) -->
			<!-- PUBLISH TO MAVEN CENTRAL (start) -->
			<plugin>
				<groupId>org.sonatype.plugins</groupId>
				<artifactId>nexus-staging-maven-plugin</artifactId>
				<version>1.6.7</version>
				<extensions>true</extensions>
				<configuration>
					<serverId>ossrh</serverId>
					<nexusUrl>https://oss.sonatype.org/</nexusUrl>
					<autoReleaseAfterClose>true</autoReleaseAfterClose>
				</configuration>
			</plugin>
			<!-- PUBLISH TO MAVEN CENTRAL (end) -->
			<!-- ADD SOURCE CODE AS REQUIRED BY MAVEN CENTRAL (start) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-sources</id>
						<goals>
							<goal>jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- ADD SOURCE CODE AS REQUIRED BY MAVEN CENTRAL (end) -->
			<!-- ADD JAVADOC AS REQUIRED BY MAVEN CENTRAL (start) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-javadocs</id>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<doclint>none</doclint>
							<failOnError>false</failOnError>
							<quiet>true</quiet>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- ADD JAVADOC AS REQUIRED BY MAVEN CENTRAL (end) -->
			<!-- SIGN ARTIFACTS AS REQUIRED BY MAVEN CENTRAL (start) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-gpg-plugin</artifactId>
				<version>1.6</version>
				<executions>
					<execution>
						<id>sign-artifacts</id>
						<phase>verify</phase>
						<configuration>
							<!-- Set to true to disable signing on local mvn install -->
							<!-- Then, to sign artifact, make explicit call mvn gpg:sign -->
							<skip>false</skip>
						</configuration>
						<goals>
							<goal>sign</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- SIGN ARTIFACTS AS REQUIRED BY MAVEN CENTRAL (end) -->
			<!-- UPDATE MODULE VERSION ON RELEASE (start) -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<configuration>
					<autoVersionSubmodules>true</autoVersionSubmodules>
					<preparationGoals>clean</preparationGoals>
				</configuration>
			</plugin>
			<!-- UPDATE MODULE VERSION ON RELEASE (end) -->
		</plugins>
	</build>
</project>
